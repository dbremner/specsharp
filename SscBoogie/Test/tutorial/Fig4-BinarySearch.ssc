class Fig4 {
  int BinarySearch(int[] a, int key)
    requires forall{int i in (0: a.Length), int j in (i: a.Length); a[i] <= a[j]};
    ensures -1 <= result && result < a.Length;
    ensures 0 <= result ==> a[result] == key;
    ensures result == -1 ==> forall{int i in (0: a.Length); a[i] != key};
  {
    int low = 0;
    int high = a.Length;

    while (low < high)
      invariant 0 <= low && high <= a.Length;
      invariant forall{int i in (0: low); a[i] < key};
      invariant forall{int i in (high: a.Length); key < a[i]};
    {
      int variant = high - low;  // record value of variant function at start of iteration
      int mid = low + (high - low) / 2;
      int midVal = a[mid];

      if (midVal < key) {
        low = mid + 1;
      } else if (key < midVal) {
        high = mid;
      } else {
        return mid; // key found
      }
      assert 0 <= variant;  // check boundedness of variant function
      assert high - low < variant;  // check that variant function has decreased
    }
    return -1;  // key not present
  }
}
